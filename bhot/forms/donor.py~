from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField, ValidationError
from wtforms.validators import DataRequired, Email, EqualTo, NumberRange
from wtforms.fields.html5 import DateField

from bhot.models.donor import Donor

def BooleanSelectFieldHelper(ControlLabel,TrueLabel,FalseLabel):
    return SelectField(ControlLabel,
        choices=[('', 'N/A'),
                 ('1', TrueLabel),
                 ('0', FalseLabel)]
    )

class DonorForm(FlaskForm):

    age = IntegerField('age')
    gender = SelectField(
        'Gender',
        choices=[('', 'N/A'),('female', 'female'), ('male', 'male')]
    )
    dtype = SelectField(
        'Donor Type',
        choices=[('', 'N/A'),
                 ('living', 'living'),
                 ('DBD', 'Donation after Brain Death'),
                 ('DCD','Donation after Circulatory Death')]
    )
    cause_of_death = StringField('Cause of Death')

    history_of_hypertension = BooleanSelectFieldHelper('History of Hypertension','yes','no')

    hbv_hbs_ag = BooleanSelectFieldHelper('HBV HBsAg status','positive','negative')
    hbv_hbs_as = BooleanSelectFieldHelper('HBV HBsAs status','positive','negative')
    hbv_hbs_ac = BooleanSelectFieldHelper('HBV HBsAc status','positive','negative')

    egfr = IntegerField('eGFR (mL/min/1.73m2)',
                        validators=[NumberRange(min=0,max=120)])

    proteinuria = IntegerField('Proteinuria (g/g or g/24h)')

    proteinuria_dipstick = SelectField('Proteinuria (dipstick)',
                                       choices=[('Absent','Absent'),
                                                ('Trace','Trace'),
                                                ('+','+'),
                                                ('++','++'),
                                                ('+++','+++'),
                                                ('++++','++++')])

    cold_ischemia_time = IntegerField('Cold ischemia time (hours)')

    delayed_graft_function = BooleanSelectFieldHelper('Delayed graft function','yes','no')

    total_hla_mismatches =  IntegerField('Total HLA mismatches')

    induction_therapy = StringField('Induction Therapy')

    preformed_dsa = BooleanSelectFieldHelper('Perfoemd DSA','positive','negative')

    class_immunodominant_dsa = SelectField('Class (immunodominant DSA)',
                                       choices=[('','N/A'),
                                                ('I','I (A, B, Cw)'),
                                                ('II','II (DR, DQ, DP)')])

    specificity_immunodominant_dsa = StringField('Specificity (immunodominant DSA)')

    mfi_immunodominant_dsa = StringField('MFI (immunodominant DSA)')

    def copy_to_db_model(self,r):
        pass

    def copy_from_db_model(self,r):
        pass
